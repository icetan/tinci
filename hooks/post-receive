#!/bin/sh
TINCIV=0.3.0

BRANCH=$(git config --get tinci.branch)
[ -n "$BRANCH" ] || BRANCH=master

read INPUT
REF=$(echo "$INPUT" | cut -d ' ' -f 3)
[ -n "$(echo "$REF" | grep -E "^refs/heads/($BRANCH)$")" ] || exit
BRANCH=$(echo "$REF" | cut -d '/' -f 3)

CMD=$(git config --get tinci.runner)
SUCCESS=hooks/tinci-success
FAIL=hooks/tinci-fail
HOOK=hooks/tinci
DIR=job.$(od -A n -t d -N 2 /dev/urandom | tr -d ' ')
mkdir -p .tinci
cd .tinci
PLOGFILE=$(ls -1t *.log 2>/dev/null | head -n1)
PREV=$(echo "$PLOGFILE" | cut -d '.' -f 1)
PSTAT=$(tail -n1 "$PLOGFILE" 2>/dev/null | sed -nE 's/^# code ([0-9]+)$/\1/p')
[ -n "$PSTAT" ] || PSTAT=0
git clone .. -b "$BRANCH" $DIR > /dev/null
cd $DIR
REV=$(git rev-parse HEAD 2>/dev/null || echo "$INPUT" | cut -d ' ' -f 2)
LOGFILE=../$REV.log
echo "# tinci $TINCIV\n# branch $BRANCH\n# running $CMD" | tee $LOGFILE
{ eval "$CMD" 2>&1; echo "# code $?"; } | tee -a $LOGFILE
STAT=$(tail -n1 $LOGFILE | sed -nE 's/^# code ([0-9]+)$/\1/p')
if [ $STAT -eq 0 ];then
  [ $PSTAT -eq 0 ] && echo "\nJob successful!" || echo "\nJob fixed!"
  (cd ../..; [ -f "$SUCCESS" ] && exec "$SUCCESS" "$PREV" "$REV" "$REF" "$PSTAT" 2>&1)
else
  [ $PSTAT -eq 0 ] && echo >&2 "\nJob failed!" || echo >&2 "\nJob is still failing!"
  (cd ../..; [ -f "$FAIL" ] && exec "$FAIL" "$PREV" "$REV" "$REF" "$PSTAT" 2>&1)
fi
(cd ../..; [ -f "$HOOK" ] && exec "$HOOK" "$PREV" "$REV" "$REF" "$PSTAT" "$STAT" 2>&1)
cd ..
rm -rf $DIR
