#!/bin/sh
VERSION=0.0.2

BRANCH=$(git config --get tinci.branch)
[ -n "$BRANCH" ] || BRANCH=master

read INPUT
REF=$(echo "$INPUT" | cut -d ' ' -f 3)
[ -n "$(echo "$REF" | grep -E "^refs/heads/($BRANCH)$")" ] || exit
BRANCH=$(echo "$REF" | cut -d '/' -f 3)

CMD=$(git config --get tinci.runner)
SUCCESS=hooks/tinci-success
FAIL=hooks/tinci-fail
REV=$(echo "$INPUT" | cut -d ' ' -f 2)
LOGFILE=../$REV.log
mkdir -p .tinci
cd .tinci
PREVSTAT=$(tail -n1 `ls -1t | head -n1`)
[ -n "$PREVSTAT" ] || PREVSTAT=0
git clone .. -b "$BRANCH" $REV > /dev/null
cd $REV
echo "=== tinci (v$VERSION) is running '$CMD' ===" | tee $LOGFILE
{ eval "$CMD" 2>&1; echo "Build exited with code:\n$?"; } | tee -a $LOGFILE
if [ $(tail -n1 $LOGFILE) -eq 0 ];then
  [ $PREVSTAT -eq 0 ] && echo "Passed!" || echo "Build fixed!"
  (cd ../..; [ -f "$SUCCESS" ] && echo "$INPUT" | exec "$SUCCESS" $PREVSTATE 2>&1)
else
  [ $PREVSTAT -eq 0 ] && echo >&2 "Build broke!" || echo >&2 "Build is still failing!"
  (cd ../..; [ -f "$FAIL" ] && echo "$INPUT" | exec "$FAIL" $PREVSTAT 2>&1)
fi
cd ..
rm -rf $REV
